
/*  Database drop/add is not supported at the SQL level for phpmyadmin, so for our use,
    first go into phpmyadmin localhost, then select the desired database, and run these
    SQL commands. Everything is nominal, except that the queries reference no specific
    database, so you need to select it manually via the GUI interface.
    
    NOTE: After running, phpmyadmin might not throw an error OR a success window.
     Instead, it just points out that the DROP TABLE queries failed- BUT the rest
     of the query still worked, so all tables have been created as needed.
 */


/* Again, can't wipe the database, so wipe every associated table.  */
DROP TABLE IF EXISTS comment;
DROP TABLE IF EXISTS file;
DROP TABLE IF EXISTS class;
DROP TABLE IF EXISTS users;



/* ======== Recreate tables using queries. ================*/

CREATE TABLE `users` (
 `UID` int(8) NOT NULL AUTO_INCREMENT,
 `Username` varchar(30) NOT NULL,
 `Password` varchar(30) NOT NULL,
 `Name` varchar(30) NOT NULL,
 `Blocked` int(1) NOT NULL,
 `Permissions` int(1) NOT NULL,
 `Department` varchar(30) DEFAULT NULL,
 `Year` int(4),
 `Major` varchar(3),
 PRIMARY KEY (`UID`)
) ENGINE=InnoDB AUTO_INCREMENT=80000000 DEFAULT CHARSET=latin1;




CREATE TABLE `class` (
 `Course_number` varchar(30) NOT NULL,
 `Department` varchar(30) DEFAULT NULL,
 `CName` varchar(50) DEFAULT NULL,
 `Instructor` int(8) NOT NULL,
 PRIMARY KEY (`Course_number`),
 KEY `Instructor` (`Instructor`),
 CONSTRAINT `class_ibfk_1` FOREIGN KEY (`Instructor`) REFERENCES `users` (`UID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;




CREATE TABLE `file` (
 `FID` int(8) NOT NULL AUTO_INCREMENT,
 `Timestamp` datetime DEFAULT NULL,
 `Type` varchar(8) NOT NULL,
 `Year` varchar(8) NOT NULL,
 `Course_number` varchar(20) NOT NULL,
 `UID` int(11) DEFAULT NULL,
 PRIMARY KEY (`FID`),
 KEY `UID` (`UID`),
 CONSTRAINT `file_ibfk_1` FOREIGN KEY (`UID`) REFERENCES `users` (`UID`)
) ENGINE=InnoDB AUTO_INCREMENT=60000000 DEFAULT CHARSET=latin1;



CREATE TABLE `comment` (
 `CID` int(8) NOT NULL AUTO_INCREMENT,
 `Body` varchar(255) NOT NULL,
 `Timestamp` datetime DEFAULT NULL,
 `FID` int(8) NOT NULL,
 `UID` int(8) NOT NULL,
 `Reply_to` int(8) DEFAULT NULL,
 PRIMARY KEY (`CID`),
 KEY `FID` (`FID`),
 KEY `UID` (`UID`),
 KEY `Reply_to` (`Reply_to`),
 CONSTRAINT `comment_ibfk_1` FOREIGN KEY (`FID`) REFERENCES `file` (`FID`),
 CONSTRAINT `comment_ibfk_2` FOREIGN KEY (`UID`) REFERENCES `users` (`UID`),
 CONSTRAINT `comment_ibfk_3` FOREIGN KEY (`Reply_to`) REFERENCES `comment` (`CID`)
) ENGINE=InnoDB AUTO_INCREMENT=70000000 DEFAULT CHARSET=latin1;


<<<<<<< HEAD
/*====================== Stored Procedures here. ========================= */
=======
/* Stored Procedures will be added here later.  */

CREATE PROCEDURE CreateStudent
	(IN uid int,
	IN username varchar(30),
	IN password varchar(30),
	IN name varchar(30),
	IN year int,
	IN major varchar(4),
	OUT result smallint)
AS
IF(Exists (Select Username from student Where Username = username)
	OR Exists (Select Username from admin Where Username = username))
	Begin
		Set result = 1;
		RaisError('That username is already taken', 14, 1);
		Return
	End
ELSE IF (Exists (Select UID from student Where UID = uid))
	Begin
		Set result = 1;
		RaisError('An account already exists for this ID number', 14, 1);
		Return
	End
ELSE
	Begin
		INSERT INTO student
			(UID, Username, Password, Name, Blocked, Year, Major)
		VALUES (uid, username, password, name, 0, year, major);
	End
	
CREATE PROCEDURE CreateAdmin
	(IN uid int,
	IN username varchar(30),
	IN password varchar(30),
	IN name varchar(30),
	IN department varchar(30),
	OUT result smallint)
AS
IF(Exists (Select Username from student Where Username = username)
	OR Exists (Select Username from admin Where Username = username))
	Begin
		Set result = 1;
		RaisError('That username is already taken', 14, 1);
		Return
	End
ELSE IF (Exists (Select UID from admin Where UID = uid))
	Begin
		Set result = 1;
		RaisError('An account already exists for this ID number', 14, 1);
		Return
	End
ELSE
	Begin
		INSERT INTO student
			(UID, Username, Password, Name, Blocked, Permissions, Department)
		VALUES (uid, username, password, name, 0, 1, department);
	End
	
CREATE PROCEDURE UpdateBlocked
	(IN uid int,
	IN blocked int,
	OUT result smallint)
AS
IF(Exists (Select UID from student Where UID = uid))
	Begin
		Update student
		Set Blocked = blocked
		Where UID = uid;
	End
ELSE IF (Exists (Select UID from admin Where UID = uid))
	Begin
		Update admin
		Set Blocked = blocked
		Where UID = uid;
	End
ELSE
	Begin
		Set result = 1;
		RaisError('UID not found', 14, 1);
		Return
	End
>>>>>>> bf8a5a80d522ce44a2d097a9c321e610d7362a3d


DROP PROCEDURE IF EXISTS CreateUser;
DROP PROCEDURE IF EXISTS UpdateBlocked;
DROP PROCEDURE IF EXISTS UpdatePermissions;
DROP PROCEDURE IF EXISTS CreateComment;
DROP PROCEDURE IF EXISTS UploadFile;



CREATE PROCEDURE CreateUser
    (IN uid_0 int,
    IN username_1 varchar(30),
    IN password_2 varchar(30),
    IN name_3 varchar(30),
    IN department_4 varchar(30),
    IN year_5 int(4),
    IN major_6 varchar(4),
    OUT result smallint
    )
    
MAIN:BEGIN
    IF department_4 = '' THEN
        SET department_4 = NULL;
    END IF;
    
    IF year_5 = '' THEN
        SET year_5 = NULL;
    END IF;
    
    IF major_6 = '' THEN
        SET major_6 = NULL;
    END IF;
    
    IF year_5 > 2020 OR year_5 < 1980 THEN
        SELECT 'Improper Year.';
        LEAVE MAIN;
    END IF;


    IF EXISTS (Select Username FROM users WHERE Username = username_1) THEN
            Set result = 1;
            SELECT 'That username is already taken';
            LEAVE MAIN;
    END IF;

    IF (EXISTS (Select UID from users Where UID = uid_0)) THEN
        Set result = 1;
        SELECT 'An account already exists for this ID number';
        LEAVE MAIN;
    END IF;

    INSERT INTO users (UID, Username, Password, Name, Blocked, Permissions, Department, Year, Major)
    VALUES(uid_0, username_1, password_2, name_3, 0, 0, department_4, year_5, major_6);

END $$

    
    
    
CREATE PROCEDURE UpdateBlocked
    (IN _uid int,
    IN _blocked int,
    OUT result smallint)
MAIN:BEGIN

    IF(Exists (Select UID from users Where UID = _uid)) THEN
        Update users SET Blocked = _blocked WHERE UID=_uid;
        LEAVE MAIN;
    END IF;

    Set result = 1;
    SELECT 'UID not found! Please try again.';

END $$



CREATE PROCEDURE UpdatePermissions
    (IN uid_1 int,
    IN new_perm int,
    OUT result smallint)
MAIN:BEGIN

    IF(Exists (Select UID from users Where UID = uid_1))
        THEN
            UPDATE users SET Permissions = new_perm WHERE UID = uid_1;
            LEAVE MAIN;
    END IF;

    Set result = 1;
    SELECT 'UID not found! Please try again.';

END $$


/* TODO: Ask about name field for File, and Derek about auto-grabbing UID from user*/

CREATE PROCEDURE UploadFile
    (IN _uid int(9),
     IN _Type varchar(9),
     IN _Year int(4),
     IN _Course_num varchar(20)
     )
MAIN:BEGIN
    IF (_Type <> 'Exam' AND _Type <> 'Quiz' AND _Type <> 'Homework' AND _Type <> 'Other') THEN
        SELECT 'Improper file type, please try again.';
        LEAVE MAIN;
    END IF;

    IF EXISTS (SELECT UID from users WHERE UID=_uid) /*Check for user existance*/
        THEN
            INSERT INTO file (Timestamp, Type, Year, Course_number, UID)
            VALUES(CURRENT_TIMESTAMP, _Type, _Year, _Course_num, _uid);
            LEAVE MAIN;
    END IF;
    Select 'User does not exist.';
    
END $$
     

CREATE PROCEDURE CreateComment
    (IN _text varchar(255),
    IN _fid int(9),
    IN _uid int(9),
    IN _comment int(9)
    )
BEGIN
    IF _comment = '' THEN
        SET _comment = NULL;
    END IF;

    INSERT INTO comment (Body, Timestamp, FID, UID, Reply_to)
    VALUES(_text, CURRENT_DATETIME, _fid, _uid, _comment);

END $$






/* Sample data is entered here....  */


CALL CreateUser(12345678, 'Admin01', 'god', 'Carl', NULL, NULL, '', @result);
CALL UpdatePermissions(12345678, 2, @result);
CALL UploadFile(12345678, 'Exam', 2013, 'CSSE_415');
/* CALL CreateComment('Hey, how are you?', ); */




/*  Done!  */















